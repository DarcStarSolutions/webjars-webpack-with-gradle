buildscript {
    ext {
        springBootVersion = '1.4.0.M2'
    }
    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("com.moowork.gradle:gradle-node-plugin:0.12")
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'eclipse'
    apply plugin: 'spring-boot'
    apply plugin: 'com.moowork.node'


    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }

    dependencies {
        compile('org.springframework.boot:spring-boot-starter-data-jpa')
        compile('org.springframework.boot:spring-boot-starter-data-rest')
        compile('org.springframework.boot:spring-boot-starter-thymeleaf')
        compile('org.springframework.boot:spring-boot-starter-web')
        compile('org.springframework.boot:spring-boot-starter-websocket')
        compile('org.springframework.boot:spring-boot-devtools')
        runtime('com.h2database:h2')
        testCompile('org.springframework.boot:spring-boot-starter-test')
    }

    def nodeModulesDir = file("${project.projectDir}/node_modules")

    task createNodeModulesDir << {
        if (!nodeModulesDir.isDirectory()) {
            nodeModulesDir.mkdirs()
        }
    }

    node {
        download = true
        workDir = file("${project.projectDir}/node")
        nodeModulesDir = nodeModulesDir
    }

    npmInstall.dependsOn createNodeModulesDir

    task copyNodeModules(type: Copy) {
        dependsOn npmInstall
        from 'node_modules'
        into 'src/main/resources/static/node_modules'
    }

    task webPack(type: NodeTask) {
        dependsOn copyNodeModules
        script = file("${project.projectDir}/node_modules/webpack/bin/webpack.js")
        execOverrides {
            it.ignoreExitValue = true
            it.workingDir = file("${project.projectDir}/src/main/resources/static")
        }
    }

    processResources.dependsOn webPack

    eclipse {
        classpath {
            containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
            containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
        }
    }

    task wrapper(type: Wrapper) {
        gradleVersion = '2.12'
    }
}